input_datetime:
  main_geyser_on_time:
    name: Main Geyser on time
    has_date: false
    has_time: true
  front_geyser_on_time:
    name: Front Geyser on time
    has_date: false
    has_time: true

timer:
  main_geyser:
    name: Main Geyser Timer
    duration: '02:00:00'
  front_geyser:
    name: Front Geyser Timer
    duration: '02:00:00'

automation:
  ### Main Geyser ###
  # Main geyser on based on input time
  - alias: Turn on main geyser
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
      - platform: time
        at: '18:00:00'
    condition:
      - condition: state
        entity_id: timer.loadshedding_slot
        state: 'idle'
    action:
    - service: timer.start
      data_template:
        entity_id: timer.main_geyser
        duration: >
          {% set sensor_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
          {% set today_name = sensor_names[now().weekday()] %}
          {% if today_name == 'sunday_disable' %}{{ 300 | int * 60 }}
          {% elif '17:00' <= states('sensor.time') <= '18:00' %}{{ 120 | int * 60 }}
          {% else %}{{ 60 | int * 60 }}{% endif -%}
    - delay: '00:00:01' # Waits 1 seconds
    - service: switch.turn_on
      data:
        entity_id: switch.main_bathroom_geyser

  # start timer when turned on
  - alias: Start timer after Turn on main geyser
    trigger:
      - platform: state
        entity_id: switch.main_bathroom_geyser
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.homeassistant_recently_started
        state: 'off'
      - condition: state
        entity_id: timer.main_geyser
        state: 'idle'
    action:
    - service: timer.start
      data_template:
        entity_id: timer.main_geyser
        duration: >
          {{ 60 | int * 60 }}

  # Main geyser off when timer finish
  - alias: Turn off main geyser
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.main_geyser
      - platform: time
        at: '5:55:00'
      - platform: time
        at: '5:58:00'
      - platform: time
        at: '5:59:00'
      - platform: time
        at: '19:50:00'
      - platform: time
        at: '19:55:00'
      - platform: time
        at: '19:59:00'
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
  
  ### Front Geyser ###
  # Front geyser on based on input time (changed to fix 7pm if never on for the day)
  - alias: Turn on front geyser
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.front_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      - condition: state
        entity_id: timer.loadshedding_slot
        state: 'idle'
      - condition: template
        value_template: "{{ '04:00' <= states('sensor.time') <= '06:00' and states('input_boolean.guest') == 'on' }}"
    action:
      - service: timer.start
        data_template:
          entity_id: timer.front_geyser
          duration: >
            {% set sensor_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
            {% set today_name = sensor_names[now().weekday()] %}
            {% if today_name == 'sunday_disable' %}{{ 300 | int * 60 }}
            {% elif '17:00' <= states('sensor.time') <= '18:00' %}{{ 120 | int * 60 }}
            {% else %}{{ 60 | int * 60 }}{% endif -%}
      - delay: '00:00:01' # Waits 1 seconds
      - service: switch.turn_on
        data:
          entity_id: switch.front_bathroom_geyser

  # start timer when turned on 
  - alias: Start timer after Turn on front geyser
    trigger:
      - platform: state
        entity_id: switch.front_bathroom_geyser
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.homeassistant_recently_started
        state: 'off'
      - condition: state
        entity_id: timer.front_geyser
        state: 'idle'
    action:
    - service: timer.start
      data_template:
        entity_id: timer.front_geyser
        duration: >
          {{ 60 | int * 60 }}

  # front geyser off when timer finish (and main then on to chain)
  - alias: Turn off front geyser
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.front_geyser
      - platform: time
        at: '6:25:00'
      - platform: time
        at: '6:29:00'
      - platform: time
        at: '6:30:00'
      - platform: time
        at: '19:50:00'
      - platform: time
        at: '19:55:00'
      - platform: time
        at: '19:59:00'
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.front_bathroom_geyser