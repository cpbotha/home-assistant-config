---
rest:
  - resource: "https://developer.sepush.co.za/business/2.0/area"
    scan_interval: '01:00:00' # RATE LIMIT!
    headers:
      Token: !secret EskomSePush
    params:
      id: "capetown-6-durbanville"
      #id: "<your area id here>"
    sensor:
      - name: EskomSePush
        force_update: true
        value_template: "OK"
        json_attributes:
          - events
          - info
          - schedule

sensor:
  #Eskom se push sensor
  - platform: rest
    name: EskomSePushAllowance
    resource: "https://developer.sepush.co.za/business/2.0/api_allowance"
    headers:
      Token: !secret EskomSePush
    json_attributes_path: "$.allowance"
    json_attributes:
      - count
      - limit
      - type
    value_template: "OK"
    scan_interval: 3600

  # template sensors abased on ESP above
  - platform: template
    sensors:
      next_loadshedding_time:
        friendly_name: Next loadshedding time
        device_class: timestamp
        unique_id: Next_Loadshedding_Time
        value_template: "{{ state_attr('sensor.eskomsepush','events')[0].start }}"
      next_loadshedding_event:
        friendly_name: Next loadshedding event
        unique_id: Next_Loadshedding_Event
        value_template: "{{ state_attr('sensor.eskomsepush','events')[0].note }}"
      next_loadshedding_time_end:
        friendly_name: Next loadshedding end time
        unique_id: Next_Loadshedding_End_Time
        device_class: timestamp
        value_template: "{{ state_attr('sensor.eskomsepush','events')[0].end }}"
      next_loadshedding_duration:
        friendly_name: Next loadshedding duration
        unique_id: Next_Loadshedding_Duration
        unit_of_measurement: mins
        value_template: '{{ [( as_timestamp(states.sensor.next_loadshedding_time_end.state) | int - as_timestamp(states.sensor.next_loadshedding_time.state) | int ) / 60,-1] | max | round(0) }}'
      time_till_loadshedding:
        friendly_name: Time until next loadshedding
        unique_id: Time_Until_Next_Loadshedding
        unit_of_measurement: mins
        value_template: '{{ [( as_timestamp(states.sensor.next_loadshedding_time.state) | int - as_timestamp(now()) | int ) / 60,-1] | max | round(0) }}'
      time_till_loadshedding_ends:
        friendly_name: Time until next loadshedding ends
        unique_id: Time_Until_Next_Loadshedding_ends
        unit_of_measurement: mins
        value_template: '{{ [( as_timestamp(states.sensor.next_loadshedding_time_end.state) | int - as_timestamp(now()) | int ) / 60,-1] | max | round(0) }}'

      eskomsepush_calls_remaining:
        friendly_name: EskomSePush API Calls remaining
        unique_id: EskomSePush_calls_remaining
        value_template: '{{ int(state_attr("sensor.eskomsepushallowance","limit")) - int(state_attr("sensor.eskomsepushallowance","count")) }}'

      loadshedding_slot_forecast:
        friendly_name: Loadshedding slot forecast
        unique_id: loadshedding_slot_forecast
        value_template: >
          {%- for event in states['sensor.eskomsepush'].attributes.events -%} {{
          as_timestamp(event['start']) | timestamp_custom('%a %d %b:') }} {{ event['note'] }} {{
          as_timestamp(event['start']) | timestamp_custom('from %H:%M') }} to {{
          as_timestamp(event['end']) | timestamp_custom('%H:%M') }}
          {{- '\n' -}} {%- endfor -%}

binary_sensor:
  - platform: template
    sensors:
      loadshedding_active:
        friendly_name: "Loadshedding active"
        device_class: problem
        value_template: >
            {% if (int(states('sensor.time_till_loadshedding')) <= 0 ) %}
             True
            {% else %}
             False
            {% endif %}

timer:
  loadshedding_slot:
    duration: '02:35:00'

automation:
  - alias: start_loadshedding_slot_timer
    trigger:
      - platform: state
        entity_id: binary_sensor.loadshedding_active
        to: 'on'
    condition:
      # make sure timer not already active
      - condition: state
        entity_id: timer.loadshedding_slot
        state: 'idle'
    action:
      - service: timer.start
        data:
          entity_id: timer.loadshedding_slot
          duration: "{{ (states('sensor.next_loadshedding_duration')|int + 35) * 60 }}"

  - alias: stop_loadshedding_slot_timer_grid_power_returned
    trigger:
      - platform: state
        entity_id: sensor.grid_mode
        to: '1' #stable after checking power
        for:
          seconds: 30
    condition:
      - condition: template
        value_template: >
          {{ trigger.from_state is not none and
            trigger.from_state.state not in ['unknown','unavailable'] }}
      - condition: state
        entity_id: timer.loadshedding_slot
        state: 'active'
    action:
      - service: timer.finish
        data:
          entity_id: timer.loadshedding_slot

  - alias: Loadshedding forecast notification
    initial_state: 'on'
    trigger:
      - entity_id: sensor.loadshedding_slot_forecast
        platform: state
    action:
      - alias: "Alert change"
        service: script.alert
        data:
          icon: ':zap:'
          object: 'Loadshedding forecast'
          target: 'alerts-david'
          message: >
            {{ states.sensor.loadshedding_slot_forecast.state }}

  - alias: Upcoming slot notification
    initial_state: 'on'
    trigger:
      - entity_id: sensor.time_till_loadshedding
        platform: state
        to: '15'
    action:
      - alias: "Alert change"
        service: script.alert
        data:
          icon: ':zap:'
          object: 'Loadshedding slot'
          target: 'alerts-david'
          message: >
            Loadshedding slot in 15 minutes
