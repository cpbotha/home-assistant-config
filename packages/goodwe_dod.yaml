input_number:
  set_goodwe_dod:
    name: Set Goodwe DoD
    min: 0
    max: 80
    mode: box
    unit_of_measurement: '%'
    #step: 1

automation:
  # Input that sets DoD on GoodWe Inverter
  # Everything else will set this input. This allows for graphing+tracking.
  - id: '1620734902145'
    alias: 'Set DoD on Goodwe based on input'
    trigger:
      - entity_id: input_number.set_goodwe_dod
        platform: state
    condition: []
    action:
      - delay: 2 # seconds
      - service: goodwe.set_ongrid_battery_dod
        data:
          entity_id: sensor.goodwe_inverter
          ongrid_battery_dod: "{{ states('input_number.set_goodwe_dod')|int }}"
    mode: queued
    max: 2

  ## set DoD at 6am after geyser was on for the morning
  - id: '1605879219606'
    alias: Goodwe DoD Morning
    description: Set max DoD in morning when day forecast more accurate
    mode: single
    trigger:
      - platform: time
        at: 06:00:00
      - platform: numeric_state
        entity_id: sensor.main_bathroom_geyser_power
        below: '100'
        for:
          seconds: 15
    condition: #[]
      # if loadshedding is below stage 5
      #- condition: numeric_state
      #  entity_id: sensor.eskom_loadshedding_stage
      #  below: 5
      - condition: template
        value_template: >-
          {% set start_time = state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False) %}
          {{ (start_time < states('sensor.time') <= '06:00' and states('input_number.set_goodwe_dod')|int == 1) or (states('sensor.time') == '06:00') }}
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: >
            {% set soc_today = states('sensor.solcast_forecast')|int %}
            {% if soc_today >= 23 %}75
            {% elif soc_today >= 20 and soc_today < 23 %}60
            {% elif soc_today >= 18 and soc_today < 20 %}55
            {% elif soc_today >= 16 and soc_today < 18 %}50
            {% elif soc_today >= 12 and soc_today < 16 %}40
            {% elif soc_today >= 10 and soc_today < 12 %}30
            {% else %}1{% endif -%}
      - condition: state
        entity_id: switch.main_bathroom_geyser
        state: 'on'
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
      - condition: state
        entity_id: timer.main_geyser
        state: 'active'
      - service: timer.finish
        data:
          entity_id: timer.main_geyser

  ## 9% at 9:00am
  - id: '1605879219607'
    alias: Goodwe DoD Day
    description: Set max DoD to 16% during the day - leave battery for evening use
    trigger:
      - platform: time
        at: '10:00:00'
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: >
            {% set soc_today = states('sensor.solcast_forecast')|int %}
            {% if soc_today <= 10 %}1
            {% else %}16{% endif -%}
    mode: single

  # At 8pm set SoC based on forecast
  - alias: Goodwe DoD Night 
    description: Set DoD based on conditions
    trigger:
      - platform: time
        at: '20:00:00'
    condition:
      # if current SoC above 85%
      - condition: numeric_state
        entity_id: sensor.goodwe_battery_soc
        above: '75'
      # if battery SoH is above 50 for some safety
      - condition: numeric_state
        entity_id: sensor.goodwe_battery_soh
        above: '50'
    action:
      # cancel timers
      - service: timer.cancel
        data_template:
          entity_id: timer.main_geyser
      - service: timer.cancel
        data_template:
          entity_id: timer.front_geyser
      # turn off geysers
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
      - service: switch.turn_off
        data:
          entity_id: switch.front_bathroom_geyser
      # set DoD
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: >
            {% set soc_tomorrow = states('sensor.solcast_forecast_energy_tomorrow')|int %}
            {% if soc_tomorrow >= 23 %}70
            {% elif soc_tomorrow >= 20 and soc_tomorrow < 23 %}60
            {% elif soc_tomorrow >= 18 and soc_tomorrow < 20 %}55
            {% elif soc_tomorrow >= 16 and soc_tomorrow < 18 %}50
            {% elif soc_tomorrow >= 12 and soc_tomorrow < 16 %}40
            {% elif soc_tomorrow >= 10 and soc_tomorrow < 12 %}30
            {% else %}16{% endif -%}
    mode: single

  ## When Eskom turns on LoadShedding set 16%
  - alias: Goodwe 16% when LoadShedding start above stage 4
    trigger:
      #- platform: state
      #  entity_id: input_boolean.loadshedding_slot_active
      #  from: 'off'
      #  to: 'on'
      - platform: numeric_state
        entity_id: sensor.eskom_loadshedding_stage
        above: 4
        for:
          minutes: 1
    condition:
      - condition: numeric_state
        entity_id: sensor.eskom_loadshedding_stage
        above: 4
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: 16
    mode: single

  ## Set DoD to 1% when solar forecast drop (legacy, disabled for now)
  ## or to 1% when geyser turn on, in the morning
  - alias: Goodwe When less than 6 kWh left on solcat set 1%
    trigger:
      #- platform: numeric_state
      #  entity_id: sensor.solcast_forecast
      #  below: '6'
      # also when geyser turn on in the morning
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      - condition: template
        value_template: >-
          {% set start_time = state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False) %}
          {{ ((start_time <= states('sensor.time') <= '06:00') and (states('sensor.solcast_forecast')|float < 25)) or ('09:00' < states('sensor.time')) }}
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: 1
    mode: single
