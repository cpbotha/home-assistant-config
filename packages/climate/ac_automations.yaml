automation:
  # AC-Office AM
  - alias: Set office AC start of work day
    trigger:
      - platform: time
        at: '7:30:00'
    condition:
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: "on"
      - condition: state
        entity_id: input_boolean.holiday
        state: "off"
    action:
      # Only run script if AC is OFF
      - condition: template
        value_template: >
          {{ (states("climate.midea_ac_32985348871179") == "off") }}
      - choose:
          - conditions:
              - condition: or
                conditions:
                  - condition: numeric_state
                    entity_id: sensor.weather_today_max
                    below: '30'
                  # office/study window is open, do fan instead of cooling
                  - condition: state
                    entity_id: binary_sensor.study_window
                    state: "on"
            sequence:
              - service: script.ac
                data:
                  ac: "climate.midea_ac_32985348871179"
                  speed: "Auto"
                  mode: "fan_only"
          - conditions:
              - condition: numeric_state
                entity_id: sensor.weather_today_max
                above: '29'
              # office/study window to be closed
              - condition: state
                entity_id: binary_sensor.study_window
                state: "off"
            sequence:
              - service: script.ac
                data:
                  ac: "climate.midea_ac_32985348871179"
                  speed: "Auto"
                  mode: "cool"

  # AC-Office PM
  - alias: Set office AC end of work day
    trigger:
      # If office AC is on at 5:30
      - platform: template
        value_template: >
          {{ (now().time().strftime("%R") == "17:30" and states('climate.midea_ac_32985348871179') != "off") }}
    action:
      # Only run script if AC is ON
      - condition: template
        value_template: >
          {{ (states("climate.midea_ac_32985348871179") != "off") }}
      - service: script.ac
        data:
          ac: "climate.midea_ac_32985348871179"
          speed: "Auto"
          mode: "fan_only"

  # AC-Bedrooms AM
  - alias: Turn off bedroom ACs in the AM
    trigger:
      - platform: time
        at: '5:30:00'
    action:
      # Main Bedroom
      - choose:
          - conditions:
              # Only run script if AC is ON
              - condition: template
                value_template: >
                  {{ (states("climate.midea_ac_30786325862093") != "off") }}
            sequence:
              - service: script.ac
                data:
                  ac: "climate.midea_ac_30786325862093"
                  speed: "Silent"
                  mode: "fan_only"
      # Childroom
      - choose:
          - conditions:
              # Only run script if AC is ON
              - condition: template
                value_template: >
                  {{ (states("climate.midea_ac_30786325862153") != "off") }}
            sequence:
              - service: script.ac
                data:
                  ac: "climate.midea_ac_30786325862153"
                  speed: "Silent"
                  mode: "fan_only"

  # AC-Bedrooms PM
  - alias: Turn on bedroom ACs in the PM
    trigger:
      - platform: time
        at: '20:00:00'
    action:
      # Main Bedroom
      - service: script.ac
        data:
          ac: "climate.midea_ac_30786325862093"
          speed: "Full"
          mode: "fan_only"

script:
  ######################################################################
  # Re-usable script to change ac to silent fan in the am
  ######################################################################
  # Example:
  ######################################################################
  # - service: script.ac
  #   data:
  #     ac: "climate.xxx"
  #     speed: "Auto" (optional - default is Auto)
  #     mode: "fan_only" (optional - default is fan_only)
  ######################################################################
  ac:
    sequence:
      # Set variables
      - variables:
          fan_speed: >
            {% if speed is defined %}
              {{ speed }}
            {% else %}
              Auto
            {% endif %}
          ac_mode: >
            {% if speed is defined %}
              {{ mode }}
            {% else %}
              fan_only
            {% endif %}
      # If AC not in mode - set to mode
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ (states(ac) != ac_mode) }}
            sequence:
              - service: script.log
                data:
                  icon: ':thermometer:'
                  object: 'Aircon'
                  message: >
                    {{ state_attr(ac, 'friendly_name') }} ac_mode: {{ ac_mode }}
              - service: climate.set_hvac_mode
                target:
                  entity_id: "{{ ac }}"
                data:
                  hvac_mode: "{{ ac_mode }}"
      # Wait a sec
      - delay: '00:00:01'
      # If AC not at same fan speed -set
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ (state_attr(ac, 'fan_mode') != fan_speed) }}
            sequence:
              - service: script.log
                data:
                  icon: ':thermometer:'
                  object: 'Aircon'
                  message: >
                    {{ state_attr(ac, 'friendly_name') }} fan_speed: {{ fan_speed }}
              - service: climate.set_fan_mode
                data:
                  fan_mode: "{{ fan_speed }}"
                target:
                  entity_id: "{{ ac }}"
