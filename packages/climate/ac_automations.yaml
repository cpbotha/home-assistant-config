---
sensor:
  - platform: template
    sensors:
      # Template sensor to display input value only
      ac_central_mode:
        friendly_name: "AC Central Mode"
        value_template: >-
          {% set temp_comfort = 20 %}
          {% set temp_avg = states('sensor.average_temperature_outside_last_1_day')|int %}
          {% if temp_avg >= (temp_comfort) %}cool
          {% elif temp_avg > (temp_comfort) %}auto
          {% elif temp_avg >= (temp_comfort - 7) and temp_avg < (temp_comfort) %}auto
          {% elif temp_avg < (temp_comfort - 7) %}heat
          {% else %}auto{% endif -%}

binary_sensor:
  - platform: template
    sensors:
      # Template sensor to display input value only
      near_sunset:
        friendly_name: "Near Sunset"
        value_template: >-
          {% set next_sunset = (as_timestamp(state_attr('sun.sun', 'next_setting')) + 0)|timestamp_custom('%H:%M') %}
          {% set next_sunset_m3h = (as_timestamp(state_attr('sun.sun', 'next_setting')) - (4 * 3600))|timestamp_custom('%H:%M') %}
          {{ (next_sunset_m3h <= states('sensor.time') <= next_sunset) }}

automation:
  # Start ACs if enough power
  - alias: Start ACs if enough power
    trigger:
      - platform: time
        at: '7:50:00'
      - platform: time
        at: '11:00:00'
      - platform: time
        at: '12:00:00'
    condition:
      - condition: numeric_state
        entity_id: sensor.solcast_forecast_energy_today_predicted
        above: '25'
    action:
      # Office
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.solcast_forecast_energy_today_predicted
                above: '25'
              - condition: state
                entity_id: binary_sensor.study_window
                state: 'off'
            sequence:
              - service: script.ac
                data:
                  ac: "climate.midea_ac_32985348871179"
                  speed: "Auto"
                  mode: >
                    {{ states('sensor.ac_central_mode') }}
      # MainBed
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.solcast_forecast_energy_today_predicted
                above: '27'
              - condition: template
                value_template: "{{ ('11:00' <= states('sensor.time') < '15:00')  }}"
              - condition: state
                entity_id: binary_sensor.main_bedroom_window
                state: 'off'
            sequence:
              - service: script.ac
                data:
                  ac: "climate.midea_ac_30786325862093"
                  speed: "Auto"
                  mode: >
                    {{ states('sensor.ac_central_mode') }}
      # ChildBed
      - choose:
          - conditions:
              - condition: numeric_state
                entity_id: sensor.solcast_forecast_energy_today_predicted
                above: '29'
              - condition: template
                value_template: "{{ ('12:00' <= states('sensor.time') < '15:00')  }}"
              - condition: state
                entity_id: binary_sensor.babyroom_window
                state: 'off'
            sequence:
              - service: script.ac
                data:
                  ac: "climate.midea_ac_30786325862153"
                  speed: "Auto"
                  mode: >
                    {{ states('sensor.ac_central_mode') }}

  # Stops ACs
  - alias: Stop ACs if started with enough power
    trigger:
      # - platform: state
      #   entity_id: sensor.solcast_forecast_energy_current_hour
      - platform: time_pattern
        # You can also match on interval. This will match every x minutes
        minutes: "/10"
    condition:
      - condition: template
        value_template: "{{ (states('sensor.goodwe_average_house_consumption_10min')|float+300)|float/1000 > states('sensor.solcast_forecast_energy_next_hour')|float }}"
      - condition: state
        entity_id: binary_sensor.near_sunset
        state: 'on'
    action:
      # - service: script.log
      #   data:
      #     icon: ':droplet:'
      #     object: 'AC Automation'
      #     message: AC Automation triggered and passed conditions
      # Office
      - choose:
          - conditions:
              - condition: state
                entity_id: climate.midea_ac_30786325862153
                state: "off"
              - condition: state
                entity_id: climate.midea_ac_30786325862093
                state: "off"
              - condition: state
                entity_id: switch.pool_pump
                state: "off"
            sequence:
              - service: script.ac
                data:
                  ac: "climate.midea_ac_32985348871179"
                  mode: "off"
      # MainBed
      - choose:
          - conditions:
              - condition: state
                entity_id: climate.midea_ac_30786325862153
                state: "off"
              - condition: state
                entity_id: switch.pool_pump
                state: "off"
            sequence:
              - service: script.ac
                data:
                  ac: "climate.midea_ac_30786325862093"
                  mode: "off"
      # ChildBed
      - choose:
          - conditions:
              - condition: state
                entity_id: switch.pool_pump
                state: "off"
            sequence:
              - service: script.ac
                data:
                  ac: "climate.midea_ac_30786325862153"
                  mode: "off"
      # Pool pump
      - choose:
          - conditions:
              - condition: state
                entity_id: switch.pool_pump
                state: "on"
            sequence:
              - service: script.log
                data:
                  icon: ':droplet:'
                  object: 'Pool pump'
                  message: AC Automation, turning pool pump off
              - service: switch.turn_off
                data:
                  entity_id: switch.pool_pump
              - condition: state
                entity_id: timer.pool_pump
                state: "active"
              - service: timer.finish
                data:
                  entity_id: timer.pool_pump

script:
  ######################################################################
  # Re-usable script to change ac to silent fan in the am
  ######################################################################
  # Example:
  ######################################################################
  # - service: script.ac
  #   data:
  #     ac: "climate.xxx"
  #     speed: "Auto" (optional - default is Auto)
  #     mode: "fan_only" (optional - default is fan_only)
  ######################################################################
  ac:
    sequence:
      # Set variables
      - variables:
          fan_speed: >
            {% if speed is defined %}
              {{ speed }}
            {% else %}
              Auto
            {% endif %}
          ac_mode: >
            {% if mode is defined %}
              {{ mode }}
            {% else %}
              fan_only
            {% endif %}
      # If AC not in mode - set to mode
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ (states(ac) != ac_mode) }}
            sequence:
              - service: script.log
                data:
                  icon: ':thermometer:'
                  object: 'Aircon'
                  message: >
                    {{ state_attr(ac, 'friendly_name') }} ac_mode: {{ ac_mode }}
              - service: climate.set_hvac_mode
                target:
                  entity_id: "{{ ac }}"
                data:
                  hvac_mode: "{{ ac_mode }}"
      # Wait a sec
      - delay: '00:00:01'
      # If AC not at same fan speed -set
      - choose:
          - conditions:
              - condition: template
                value_template: >
                  {{ (state_attr(ac, 'fan_mode') != fan_speed) }}
            sequence:
              - service: script.log
                data:
                  icon: ':thermometer:'
                  object: 'Aircon'
                  message: >
                    {{ state_attr(ac, 'friendly_name') }} fan_speed: {{ fan_speed }}
              - service: climate.set_fan_mode
                data:
                  fan_mode: "{{ fan_speed }}"
                target:
                  entity_id: "{{ ac }}"
