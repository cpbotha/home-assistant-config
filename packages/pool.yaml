input_boolean:
  pool_cover_on:
    name: Pool Cover On

input_datetime:
  pool_pump_on_time:
    name: Pool pump on time
    has_date: false
    has_time: true

timer:
  pool_pump:
    name: Pool pump
    duration: '04:00:00'
  pool_pump_grid_pause:
    name: Pool pump - grid pause
    duration: '00:05:00'

automation:
  # Pool pump on based on input time
  - alias: Turn on pool pump
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.pool_pump_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
      - platform: numeric_state
        entity_id: sensor.main_bathroom_geyser_power
        below: '50'
    #condition:
      #- condition: state
      #  entity_id: timer.loadshedding_slot
      #  state: 'idle'
      #- condition: state
      #  entity_id: sensor.grid_mode
      #  state: '1'
    action:
      - choose:
        # Morning
        - conditions:
            - condition: time
              after: '9:00:00'
              before: '16:00:00'
            - condition: numeric_state
              entity_id: sensor.solcast_forecast
              above: '17'
            - condition: or
              conditions:
                - condition: numeric_state
                  entity_id: sensor.solcast_forecast
                  above: '19'
                - condition: numeric_state
                  entity_id: sensor.goodwe_battery_soc
                  above: '43'
          sequence:
            - service: timer.start
              data_template:
                entity_id: timer.pool_pump
                duration: >
                  {% set day_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
                  {% set today_name = day_names[now().weekday()] %}
                  {% if 21 <= states('sensor.solcast_forecast')|float %}{{ 8 * 60 | int * 60 }}
                  {% elif 19 <= states('sensor.solcast_forecast')|float < 21 %}{{ 6 * 60 | int * 60 }}
                  {% elif 17 <= states('sensor.solcast_forecast')|float < 19 %}{{ 4 * 60 | int * 60 }}
                  {% else %}{{ 1 * 60 | int * 60 }}{% endif -%}
            - service: switch.turn_on
              data:
                entity_id: switch.pool_pump
        # Afternoon after geyser
        - conditions:
            - condition: time
              after: '11:10:00'
              before: '16:00:00'
            - condition: numeric_state
              entity_id: sensor.solcast_forecast
              above: '3'
          sequence:
            - service: timer.start
              data_template:
                entity_id: timer.pool_pump
                duration: >
                  {% set day_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
                  {% set today_name = day_names[now().weekday()] %}
                  {% if 5 <= states('sensor.solcast_forecast')|float %}{{ 4 * 60 | int * 60 }}
                  {% elif 4 <= states('sensor.solcast_forecast')|float < 5 %}{{ 3 * 60 | int * 60 }}
                  {% elif 3 <= states('sensor.solcast_forecast')|float < 4 %}{{ 2 * 60 | int * 60 }}
                  {% else %}{{ 1 * 60 | int * 60 }}{% endif -%}
            - service: switch.turn_on
              data:
                entity_id: switch.pool_pump
        default:
          - service: switch.turn_off
            entity_id: switch.pool_pump

  # start timer when turned on (2 min)
  - alias: Start timer after Turn on pool pump
    trigger:
      - platform: state
        entity_id: switch.pool_pump
        from: 'off'
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.homeassistant_recently_started
        state: 'off'
      - condition: state
        entity_id: timer.pool_pump
        state: 'idle'
    action:
    - service: timer.start
      data_template:
        entity_id: timer.pool_pump
        duration: >
          {{ 2 | int * 60 }} 
  # pool pump off when timer finish
  - alias: Turn off pool pump
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.pool_pump
      - platform: time
        at: "17:00:00"
      #- platform: numeric_state
      #  entity_id: sensor.goodwe_average_solar_generation_30min
      #  below: '1200'
      #- platform: template
      #  value_template: "{{ (states('sensor.goodwe_average_solar_generation_30min')|float + 200) < states('sensor.goodwe_average_house_consumption_30min')|float }}"
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.pool_pump