---
### EskomSePush API Docs: https://documenter.getpostman.com/view/1296288/UzQuNk3E
### To sign up for a key, scroll down on their page for the API Request link: https://sepush.co.za/
### Direct link to sign-up form: https://docs.google.com/forms/d/e/1FAIpQLSeZhAkhDaQX_mLT2xn41TkVjLkOH3Py3YWHi_UqQP4niOY01g/viewform

### Moved away from 'rest' to integration: https://github.com/wernerhp/ha.integration.load_shedding

sensor:
  # template sensors based on ESP above
  - platform: template
    sensors:
      loadshedding_slot_forecast:
        friendly_name: Loadshedding slot forecast
        unique_id: loadshedding_slot_forecast
        value_template: >
          {%if state_attr('sensor.load_shedding_area_capetown_6_durbanville','forecast')|count > 0 %}
          {%- set data = namespace(count=1) -%}
          {%- for event in states['sensor.load_shedding_area_capetown_6_durbanville'].attributes.forecast -%}
          {% if data.count <= 1 %}
          {%- set start = as_timestamp(event['start_time']) %}
          {%- set end = as_timestamp(event['end_time']) %}
          {%- set startdelta = as_timestamp(event['start_time'] + timedelta(minutes=30)) %}
          {%- if startdelta != end %}
          {{- start | timestamp_custom('%a %d %b:') }} {{- start | timestamp_custom(' %H:%M') }} to {{- end | timestamp_custom(' %H:%M') }}
          {{- '\n' -}}
          {%- set data.count = data.count + 1 %}
          {%-endif%}
          {%-endif%}{%- endfor -%}
          {%-else%}
          None scheduled
          {%endif%}
      loadshedding_slot_next:
        friendly_name: Loadshedding slot next
        unique_id: loadshedding_slot_next
        value_template: >
          {%if state_attr('sensor.load_shedding_area_capetown_6_durbanville','forecast')|count > 0 %}
          {{ as_timestamp(states['sensor.load_shedding_area_capetown_6_durbanville'].attributes.forecast[0]['start_time']) | timestamp_custom('%H:%M') }}
          {%else%}
          None scheduled
          {%endif%}
      loadshedding_slot_next_after:
        friendly_name: Loadshedding slot next after
        unique_id: loadshedding_slot_next_after
        value_template: >
          {%if state_attr('sensor.load_shedding_area_capetown_6_durbanville','forecast')|count > 1 %}
          {{ as_timestamp(states['sensor.load_shedding_area_capetown_6_durbanville'].attributes.forecast[1]['start_time']) | timestamp_custom('%H:%M') }}
          {%else%}
          None scheduled
          {%endif%}
      time_till_loadshedding:
        friendly_name: Time until next loadshedding
        unique_id: Time_Until_Next_Loadshedding
        unit_of_measurement: mins
        value_template: >
            {%if state_attr('sensor.load_shedding_area_capetown_6_durbanville','forecast')|count > 0 %}
            {{ [( as_timestamp(state_attr('sensor.load_shedding_area_capetown_6_durbanville','next_end_time')) | int - as_timestamp(now()) | int ) / 60,-1] | max }}
            {%else%}
            Unknown
            {%endif%}
      next_loadshedding_duration:
        friendly_name: Calculated Next Loadshedding Duration
        unique_id: actual_next_loadshedding_duration
        unit_of_measurement: mins
        value_template: >
            {% set area_sensor = "sensor.load_shedding_area_capetown_6_durbanville"%}
            {% set area_schedule = state_attr(area_sensor, "forecast") %}
            {% set duration = 0 %}
            {% if area_schedule %}
              {% set next_slot_end = as_timestamp(area_schedule[:3][0].end_time) - as_timestamp(area_schedule[:3][0].start_time) %}
              {% set second_slot_end = as_timestamp(area_schedule[:3][1].end_time) - as_timestamp(area_schedule[:3][1].start_time) %}
              {% set diff = as_timestamp(area_schedule[:3][1].start_time) - as_timestamp(area_schedule[:3][0].start_time) %}
              {% set duration = as_timestamp(area_schedule[:3][0].end_time) - as_timestamp(area_schedule[:3][0].start_time) %}
              {% if diff == 7200 %}
                {% set duration = next_slot_end + second_slot_end %}
              {% endif%}
              {{ duration // 60 }}
            {% endif%}

timer:
  loadshedding_slot:
    duration: '02:35:00'

automation:
  - alias: start_loadshedding_slot_timer
    trigger:
      - platform: state
        entity_id: sensor.load_shedding_area_capetown_6_durbanville
        to: 'on'
    condition:
      # make sure timer not already active
      - condition: state
        entity_id: timer.loadshedding_slot
        state: 'idle'
    action:
      - service: timer.start
        data:
          entity_id: timer.loadshedding_slot
          duration: "{{ (states('sensor.next_loadshedding_duration')|int) * 60 }}"

  - alias: stop_loadshedding_slot_timer_grid_power_returned
    trigger:
      - platform: state
        entity_id: sensor.grid_mode
        to: '1' #stable after checking power
        for:
          seconds: 30
    condition:
      - condition: template
        value_template: >
          {{ trigger.from_state is not none and
            trigger.from_state.state not in ['unknown','unavailable'] }}
      - condition: state
        entity_id: timer.loadshedding_slot
        state: 'active'
    action:
      - service: timer.finish
        data:
          entity_id: timer.loadshedding_slot

  - alias: Loadshedding forecast notification
    initial_state: 'on'
    trigger:
      - entity_id: sensor.loadshedding_slot_forecast
        platform: state
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: sensor.loadshedding_slot_forecast
            state: "unavailable"
      - condition: template
        value_template: >
          {{ trigger.from_state.state != trigger.to_state.state }}
      - condition: template
        value_template: >
          {{ trigger.from_state.state != "unavailable" }}
    action:
      - alias: "Alert change"
        service: script.alert
        data:
          icon: ':zap:'
          object: 'Loadshedding forecast'
          target: 'power-alerts'
          message: >
            {{ states.sensor.loadshedding_slot_forecast.state }}

  - alias: Upcoming slot notification
    initial_state: 'on'
    trigger:
      - entity_id: sensor.time_till_loadshedding
        platform: state
        to: '15'
    condition:
      - condition: time
        before: '18:00:00'
        after: '14:00:00'
    action:
      - alias: "Alert change"
        service: script.alert
        data:
          icon: ':zap:'
          object: 'Loadshedding slot'
          target: 'power-alerts'
          message: >
            Loadshedding slot in 15 minutes
