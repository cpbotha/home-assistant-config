input_datetime:
  main_geyser_on_time:
    name: Main Geyser on time
    has_date: false
    has_time: true
  front_geyser_on_time:
    name: Front Geyser on time
    has_date: false
    has_time: true

timer:
  main_geyser:
    name: Main Geyser Timer
    duration: '02:00:00'
  front_geyser:
    name: Front Geyser Timer
    duration: '02:00:00'

automation:
  ### Main Geyser ###
  # Main geyser on based on input time
  - alias: Turn on main geyser
    trigger:
      platform: template
      value_template: "{{ states('sensor.time') == (state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      - condition: state
        entity_id: timer.loadshedding_slot
        state: 'idle'
    action:
    - service: timer.start
      data_template:
        entity_id: timer.main_geyser
        duration: >
          {% set sensor_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
          {% set today_name = sensor_names[now().weekday()] %}
          {% if today_name == 'sunday_disable' %}{{ 300 | int * 60 }}
          {% else %}{{ 90 | int * 60 }}{% endif -%}
    - delay: '00:00:01' # Waits 1 seconds
    - service: switch.turn_on
      data:
        entity_id: switch.main_bathroom_geyser

  # start timer when turned on
  - alias: Start timer after Turn on main geyser
    trigger:
      - platform: state
        entity_id: switch.main_bathroom_geyser
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.homeassistant_recently_started
        state: 'off'
      - condition: state
        entity_id: timer.main_geyser
        state: 'idle'
    action:
    - service: timer.start
      data_template:
        entity_id: timer.main_geyser
        duration: >
          {{ 60 | int * 60 }}

  # Main geyser off when timer finish
  - alias: Turn off main geyser
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.main_geyser
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
  
  ### Front Geyser ###
  # Front geyser on based on input time (changed to fix 7pm if never on for the day)
  - alias: Turn on front geyser
    trigger:
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.front_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
      - platform: time
        at: '19:00:00'
    condition:
      - condition: state
        entity_id: timer.loadshedding_slot
        state: 'idle'
    action:
      - service: timer.start
        data_template:
          entity_id: timer.front_geyser
          duration: >
            {{ 90 | int * 60 }}
      - delay: '00:00:01' # Waits 1 seconds
      - service: switch.turn_on
        data:
          entity_id: switch.front_bathroom_geyser

  # start timer when turned on 
  - alias: Start timer after Turn on front geyser
    trigger:
      - platform: state
        entity_id: switch.front_bathroom_geyser
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.homeassistant_recently_started
        state: 'off'
      - condition: state
        entity_id: timer.front_geyser
        state: 'idle'
    action:
    - service: timer.start
      data_template:
        entity_id: timer.front_geyser
        duration: >
          {{ 60 | int * 60 }}

  # front geyser off when timer finish (and main then on to chain)
  - alias: Turn off front geyser
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.front_geyser
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.front_bathroom_geyser

  #### Loadshedding work-arounds
  # When in loadshedding, start timer and pause
  - alias: Turn on Main geyser timer in loadshedding
    trigger:
      platform: template
      value_template: "{{ states('sensor.time') == (state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      - condition: state
        entity_id: timer.loadshedding_slot
        state: 'active'
    action:
    - service: timer.start
      data_template:
        entity_id: timer.main_geyser
        duration: >
          {% set sensor_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
          {% set today_name = sensor_names[now().weekday()] %}
          {% if today_name == 'sunday' %}{{ 300 | int * 60 }}
          {% else %}{{ 60 | int * 60 }}{% endif -%}
    - delay: '00:00:01' # Waits 1 seconds
    - service: timer.pause
      data_template:
        entity_id: timer.main_geyser

  # Resume Main geyser after loadshedding finished
  - alias: Turn on Main geyser after loadshedding slot ended
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.loadshedding_slot
    condition:
      - condition: state
        entity_id: timer.main_geyser
        state: 'paused'
    action:
      # Starts or restarts a timer with the provided duration. 
      # If no duration is given, it will either restart with its initial 
      # value, or continue a paused timer with the remaining duration.
      - service: timer.start  
        data:
          entity_id: timer.main_geyser
      - service: switch.turn_on
        data:
          entity_id: switch.main_bathroom_geyser

  # Pause Main geyser if loadshedding slot started
  - alias: Pause Main geyserif loadshedding slot started
    trigger:
      - platform: event
        event_type: timer.started
        event_data:
          entity_id: timer.loadshedding_slot
    condition:
      - condition: state
        entity_id: timer.main_geyser
        state: 'active'
    action:
      - service: timer.pause
        data:
          entity_id: timer.main_geyser
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser

  ## Front Geyser
  # When in loadshedding, start timer and pause
  - alias: Turn on Front geyser timer in loadshedding
    trigger:
      platform: template
      value_template: "{{ states('sensor.time') == (state_attr('input_datetime.front_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      - condition: state
        entity_id: timer.loadshedding_slot
        state: 'active'
    action:
    - service: timer.start
      data_template:
        entity_id: timer.front_geyser
        duration: >
          {% set sensor_names = [ 'monday', 'tuesday', 'wednesday','thursday','friday','saturday','sunday'] %}
          {% set today_name = sensor_names[now().weekday()] %}
          {% if today_name == 'sunday' %}{{ 300 | int * 60 }}
          {% else %}{{ 60 | int * 60 }}{% endif -%}
    - delay: '00:00:01' # Waits 1 seconds
    - service: timer.pause
      data_template:
        entity_id: timer.front_geyser

  # Resume Front geyser after loadshedding finished
  - alias: Turn on Front geyser after loadshedding slot ended
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.loadshedding_slot
    condition:
      - condition: state
        entity_id: timer.front_geyser
        state: 'paused'
    action:
      # Starts or restarts a timer with the provided duration. 
      # If no duration is given, it will either restart with its initial 
      # value, or continue a paused timer with the remaining duration.
      - service: timer.start  
        data:
          entity_id: timer.front_geyser
      - service: switch.turn_on
        data:
          entity_id: switch.front_bathroom_geyser

  # Pause Front geyser if loadshedding slot started
  - alias: Pause Front geyserif loadshedding slot started
    trigger:
      - platform: event
        event_type: timer.started
        event_data:
          entity_id: timer.loadshedding_slot
    condition:
      - condition: state
        entity_id: timer.front_geyser
        state: 'active'
    action:
      - service: timer.pause
        data:
          entity_id: timer.front_geyser
      - service: switch.turn_off
        data:
          entity_id: switch.front_bathroom_geyser

  ## Turn off geysers when solcast below 1kWh
  - alias: Turn off geysers when solcast below 1kWh
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.solcast_forecast
        below: '1'
    condition:
      - condition: state  # 'day' condition: from sunrise until sunset
        entity_id: sun.sun
        state: 'above_horizon'
      - condition: time
        after: '8:00:00'
        before: '23:59:59'
    action:
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
      - service: switch.turn_off
        data:
          entity_id: switch.front_bathroom_geyser

  # Front geyser on based on battery
  - alias: Turn on front geyser based on battery
    trigger:
      - platform: state
        entity_id: sensor.goodwe_battery_mode_label
        to: 'Standby'
    condition:
      - condition: state
        entity_id: sensor.goodwe_battery_mode_label
        state: 'Standby'
      - condition: numeric_state
        entity_id: sensor.goodwe_battery_soc
        above: '99'
      # Since we have solar, check forecast then continue
      - condition: numeric_state
        entity_id: sensor.solcast_forecast
        above: '1.5'
      - condition: sun
        before: sunset
        before_offset: -00:30:00
        after: sunrise
        after_offset: 00:30:00
      - condition: state
        entity_id: switch.main_bathroom_geyser
        state: 'off'
      - condition: state
        entity_id: switch.front_bathroom_geyser
        state: 'off'
    action:
      - service: timer.start
        data_template:
          entity_id: timer.front_geyser
      - service: switch.turn_on
        data:
          entity_id: switch.front_bathroom_geyser
      - delay: '00:00:05' # Waits 1 seconds
      - service: timer.cancel
        data_template:
          entity_id: timer.front_geyser

  # Main geyser on based on battery
  - alias: Turn on Main geyser based on battery
    trigger:
      - platform: state
        entity_id: sensor.goodwe_battery_mode_label
        to: 'Standby'
        for:
          minutes: 1
    condition:
      - condition: state
        entity_id: sensor.goodwe_battery_mode_label
        state: 'Standby'
      - condition: numeric_state
        entity_id: sensor.goodwe_battery_soc
        above: '99'
      # Since we have solar, check forecast then continue
      - condition: numeric_state
        entity_id: sensor.solcast_forecast
        above: '2'
      - condition: sun
        before: sunset
        before_offset: -00:30:00
        after: sunrise
        after_offset: 00:30:00
      - condition: state
        entity_id: switch.main_bathroom_geyser
        state: 'off'
      - condition: state
        entity_id: switch.front_bathroom_geyser
        state: 'on'
    action:
      - service: timer.start
        data_template:
          entity_id: timer.main_geyser
      - service: switch.turn_on
        data:
          entity_id: switch.main_bathroom_geyser
      - delay: '00:00:05' # Waits 1 seconds
      - service: timer.cancel
        data_template:
          entity_id: timer.main_geyser

  ## Front geyser off on based on battery
  #- alias: Turn off front geyser based on battery
  #  trigger:
  #    - platform: state
  #      entity_id: sensor.goodwe_battery_mode_label
  #      to: 'Standby'
  #  condition:
  #    - condition: state
  #      entity_id: switch.front_bathroom_geyser
  #      state: 'on'
  #      for:
  #        minutes: 1
  #    - condition: numeric_state
  #      entity_id: sensor.goodwe_battery_soc
  #      below: '95'
  #    - condition: state
  #      entity_id: timer.front_geyser
  #      state: 'idle'
  #  action:
  #    - service: switch.turn_off
  #      data:
  #        entity_id: switch.front_bathroom_geyser
  ## Main geyser off on based on battery
  #- alias: Turn off Main geyser based on battery
  #  trigger:
  #    - platform: state
  #      entity_id: sensor.goodwe_battery_mode_label
  #      to: 'Standby'
  #  condition:
  #    - condition: state
  #      entity_id: switch.main_bathroom_geyser
  #      state: 'on'
  #      for:
  #        minutes: 1
  #    - condition: numeric_state
  #      entity_id: sensor.goodwe_battery_soc
  #      below: '95'
  #    - condition: state
  #      entity_id: timer.main_geyser
  #      state: 'idle'
  #  action:
  #    - service: switch.turn_off
  #      data:
  #        entity_id: switch.main_bathroom_geyser