solcast:
  api_key: !secret solcast_api
  resource_id: !secret solcast_resource
  api_limit: 20
  disable_ssl_check: False
  disable_automatic_forecast_fetching: True
  disable_automatic_history_fetching: True

input_number:
  set_goodwe_dod:
    name: Set Goodwe DoD
    min: 0
    max: 70
    mode: box
    unit_of_measurement: '%'
    #step: 1

template:
  - trigger:
      - platform: time_pattern
        # This will update every night 30min
        hours: "*"
        minutes: "/30"
      - platform: state
        entity_id:
          - sensor.solcast_forecast_data
    sensor:
      # Keep track how many days have past since a date
      - name: solcast_forecast_average_30min
        state: >-
              {% if states('sensor.solcast_forecast_data') in ['unavailable','unknown','none'] -%}
                {{ states('sensor.solcast_forecast_average_30min') }}
              {% else %}
                {{ state_attr('sensor.solcast_forecast_data', 'forecasts')[0].pv_estimate|default(0)|round(2) }}
              {% endif %}
        unit_of_measurement: 'kW'

sensor:
  - platform: rest
    name: solcast_forecast_data
    json_attributes:
      - forecasts
    # resource: https://api.solcast.com.au/rooftop_sites/SOLCAST_RESOURCE_ID/forecasts?format=json&api_key=SOLCAST_API_KEY
    resource: !secret solcast_forecast_resource
    method: GET
    value_template: "OK"
    scan_interval: 01:00
    force_update: true
  - platform: template
    sensors:
        #solcast_forecast_average_30min:
        #    value_template: >-
        #      {% if states('sensor.solcast_forecast_data') in ['unavailable','unknown','none'] -%}
        #        {{ states('sensor.solcast_forecast_average_30min') }}
        #      {% else %}
        #        {{ state_attr('sensor.solcast_forecast_data', 'forecasts')[0].pv_estimate|default(0)|round(2) }}
        #      {% endif %}
        #    unit_of_measurement: 'kW'
        solcast_forecast_average_60min:
            value_template: >-
              {{ ((state_attr('sensor.solcast_forecast_data', 'forecasts')[0].pv_estimate|default('variable is not defined') + state_attr('sensor.solcast_forecast_data', 'forecasts')[1].pv_estimate|default('variable is not defined'))/2)|round(2) }}
            unit_of_measurement: 'kW'
        solcast_forecast_today:
            value_template: >-
              {% set ns = namespace (fc_today = 0) %}
              {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
                {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
                {% if daydiff.days == 0 %}
                  {% set ns.fc_today = ns.fc_today + (forecast.pv_estimate/2)|float %}
                {%- endif %}
              {%- endfor %}
              {{ ns.fc_today|round(2) }}
            unit_of_measurement: 'kWh'
        solcast_forecast_today_max:
            value_template: >-
              {% set ns = namespace (fc_today_max = 0) %}
              {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
                {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
                {% if daydiff.days == 0 %}
                  {% if ns.fc_today_max < forecast.pv_estimate|float %}
                    {% set ns.fc_today_max = forecast.pv_estimate|float %}
                  {%- endif %}
                {%- endif %}
              {%- endfor %}
              {{ ns.fc_today_max|round(2) }}
            unit_of_measurement: 'kW'
        solcast_forecast_today_max_time:
            value_template: >-
              {% set ns = namespace (fc_today_max = 0, fc_today_max_time = 0) %}
              {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
                {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
                {% if daydiff.days == 0 %}
                  {% if ns.fc_today_max < forecast.pv_estimate|float %}
                    {% set ns.fc_today_max = forecast.pv_estimate|float %}
                    {% set ns.fc_today_max_time = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).time() %}
                  {%- endif %}
                {%- endif %}
              {%- endfor %}
              {{ ns.fc_today_max_time }}
        solcast_forecast_tommorrow:
            value_template: >-
              {% set ns = namespace (fc_tommorrow = 0) %}
              {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
                {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
                {% if daydiff.days == 1 %}
                  {% set ns.fc_tommorrow = ns.fc_tommorrow + (forecast.pv_estimate/2)|float %}
                {%- endif %}
              {%- endfor %}
              {{ ns.fc_tommorrow|round(2) }}
            unit_of_measurement: 'kWh'
        solcast_forecast_day_after_tommorrow:
            value_template: >-
              {% set ns = namespace (fc_dayAftTom = 0) %}
              {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
                {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
                {% if daydiff.days == 2 %}
                  {% set ns.fc_dayAftTom = ns.fc_dayAftTom + (forecast.pv_estimate/2)|float %}
                {%- endif %}
              {%- endfor %}
              {{ ns.fc_dayAftTom|round(2) }}
            unit_of_measurement: 'kWh'

automation:
  - id: '1606211453192'
    alias: Solcast Update
    description: Update the Solcast prediction for the day
    trigger:
      - platform: time_pattern
        hours: /01
    condition:
      - condition: sun
        before: sunset
        before_offset: -00:30:00
        after: sunrise
        after_offset: 00:30:00
    action:
      - service: solcast.update_forecast
        data: {}
    mode: single

  ## 9% at 5:30am
  - id: '1605879219606'
    alias: Goodwe DoD Morning
    description: Set max DoD in morning when day forecast more accurate
    trigger:
      - platform: time
        at: 06:00:00
    condition: []
      # if loadshedding is below stage 5
      #- condition: numeric_state
      #  entity_id: sensor.eskom_loadshedding_stage
      #  below: 5
    action:
      - service: solcast.update_forecast
        data: {}
      - delay: '00:00:10' # Waits x seconds
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: >
            {% set soc_today = states('sensor.solcast_forecast')|int %}
            {% if soc_today >= 18 %}70
            {% elif soc_today >= 14 and soc_today < 18 %}60
            {% elif soc_today >= 12 and soc_today < 14 %}55
            {% elif soc_today >= 11 and soc_today < 12 %}50
            {% elif soc_today >= 10 and soc_today < 11 %}45
            {% elif soc_today >= 9 and soc_today < 10 %}40
            {% elif soc_today >= 8 and soc_today < 9 %}35
            {% elif soc_today >= 7 and soc_today < 8 %}12
            {% else %}1{% endif -%}
    mode: single

  ## 9% at 9:00am
  - id: '1605879219607'
    alias: Goodwe DoD Day
    description: Set max DoD to 11% during the day - leave battery for evening use
    trigger:
      - platform: time
        at: '9:30:00'
    condition: []
    action:
      - service: solcast.update_forecast
        data: {}
      - delay: '00:00:10' # Waits x seconds
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: >
            {% set soc_today = states('sensor.solcast_forecast')|int %}
            {% if soc_today <= 7 %}1
            {% else %}11{% endif -%}
    mode: single

  # At 8pm set SoC based on forecast
  - alias: Goodwe DoD Night 
    description: Set DoD based on conditions
    trigger:
      - platform: time
        at: '20:00:00'
    condition:
      # if current SoC above 85%
      - condition: numeric_state
        entity_id: sensor.goodwe_battery_soc
        above: '85'
      # if battery SoH is above 50 for some safety
      - condition: numeric_state
        entity_id: sensor.goodwe_battery_soh
        above: '50'
    action:
      - service: solcast.update_forecast
        data: {}
      - delay: '00:00:10' # Waits x seconds
      # cancel timers
      - service: timer.cancel
        data_template:
          entity_id: timer.main_geyser
      - service: timer.cancel
        data_template:
          entity_id: timer.front_geyser
      # turn off geysers
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
      - service: switch.turn_off
        data:
          entity_id: switch.front_bathroom_geyser
      # set DoD
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: >
            {% set soc_tomorrow = state_attr('sensor.solcast_forecast', 'tomorrow') %}
            {% if soc_tomorrow >= 18 %}70
            {% elif soc_tomorrow >= 14 and soc_tomorrow < 18 %}60
            {% elif soc_tomorrow >= 12 and soc_tomorrow < 14 %}55
            {% elif soc_tomorrow >= 11 and soc_tomorrow < 12 %}50
            {% elif soc_tomorrow >= 10 and soc_tomorrow < 11 %}45
            {% elif soc_tomorrow >= 9 and soc_tomorrow < 10 %}40
            {% elif soc_tomorrow >= 8 and soc_tomorrow < 9 %}35
            {% else %}11{% endif -%}
    mode: single

  ## When Eskom turns on LoadShedding set 11%
  - alias: Goodwe 11% when LoadShedding start above stage 4
    trigger:
      #- platform: state
      #  entity_id: input_boolean.loadshedding_slot_active
      #  from: 'off'
      #  to: 'on'
      - platform: numeric_state
        entity_id: sensor.eskom_loadshedding_stage
        above: 4
        for:
          minutes: 1
    condition:
      - condition: numeric_state
        entity_id: sensor.eskom_loadshedding_stage
        above: 4
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: 11
    mode: single

  ## When less than 4 kWh left on solcat set 1%
  - alias: Goodwe When less than 6 kWh left on solcat set 1%
    trigger:
      - platform: numeric_state
        entity_id: sensor.solcast_forecast
        below: '6'
      # also when geyser turn on in the morning
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: 1
    mode: single

  # Input that sets DoD on GoodWe Inverter
  # Everything else will set this input. This allows for graphing+tracking.
  - id: '1620734902145'
    alias: 'Set DoD on Goodwe based on input'
    trigger:
      - entity_id: input_number.set_goodwe_dod
        platform: state
    condition: []
    action:
      - service: goodwe.set_ongrid_battery_dod
        data:
          entity_id: sensor.goodwe_inverter
          ongrid_battery_dod: '{{ states.input_number.set_goodwe_dod.state|int }}'
    mode: single