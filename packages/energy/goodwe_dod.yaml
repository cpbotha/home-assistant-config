input_number:
  set_goodwe_dod:
    name: Set Goodwe DoD
    min: 0
    max: 80
    mode: box
    unit_of_measurement: '%'

script:
  ######################################################################
  # Re-usable script to set the DoD via input
  ######################################################################
  # Example:
  ######################################################################
  # - service: script.goodwe_set_dod
  #   data:
  #     forecast: "50"
  ######################################################################
  goodwe_set_dod:
    sequence:
      - alias: "Set variables"
        variables:
          dod: >
            {% set forecast_int = forecast|int %}
            {% if forecast_int >= 28 %}70
            {% elif forecast_int >= 23 and forecast_int < 28 %}65
            {% elif forecast_int >= 20 and forecast_int < 23 %}60
            {% elif forecast_int >= 18 and forecast_int < 20 %}55
            {% elif forecast_int >= 16 and forecast_int < 18 %}50
            {% elif forecast_int >= 12 and forecast_int < 16 %}40
            {% elif forecast_int >= 10 and forecast_int < 12 %}30
            {% else %}16{% endif -%}
      - alias: "Set DoD on inverter"
        service: number.set_value
        data:
          value: >
            {{ dod }}
        target:
          entity_id: number.depth_of_discharge_on_grid
      - alias: "Log action taken"
        service: script.log
        data:
          icon: ':zap:'
          object: 'GoodWe'
          message: >
            Setting DoD to {{ dod }} based on {{ forecast }}kWh forecast

automation:
  # Input that sets DoD on GoodWe Inverter
  # Everything else will set this input. This allows for graphing+tracking.
  - id: '1620734902145'
    alias: 'Set DoD on Goodwe based on input'
    trigger:
      - entity_id: number.depth_of_discharge_on_grid
        platform: state
    action:
      - service: script.log
        data:
          icon: ':zap:'
          object: 'GoodWe'
          message: >
            DoD set to {{ states('number.depth_of_discharge_on_grid')|int }} based on input value updated
    mode: queued
    max: 2

  ## set DoD at 6am after geyser was on for the morning
  - id: '1605879219606'
    alias: Goodwe DoD Morning
    description: Set max DoD in morning when day forecast more accurate
    mode: single
    trigger:
      - platform: time
        at: 06:00:00
      - platform: numeric_state
        entity_id: sensor.main_bathroom_geyser_power
        below: '100'
        for:
          seconds: 15
    condition:
      - condition: template
        value_template: >-
          {% set start_time = state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False) %}
          {{ (start_time < states('sensor.time') <= '06:00' and states('input_number.set_goodwe_dod')|int == 1) or (states('sensor.time') == '06:00') }}
    action:
      - service: script.goodwe_set_dod
        data:
          forecast: "{{ states('sensor.solcast_forecast') }}"
      - condition: state
        entity_id: switch.main_bathroom_geyser
        state: 'on'
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
      - condition: state
        entity_id: timer.main_geyser
        state: 'active'
      - service: timer.finish
        data:
          entity_id: timer.main_geyser

  ## 16% at 10:00am
  - id: '1605879219607'
    alias: Goodwe DoD Day
    description: Set max DoD to 16% during the day - leave battery for evening use
    trigger:
      - platform: time
        at: '10:00:00'
    condition:
      - condition: numeric_state
        entity_id: sensor.solcast_forecast_energy_today_predicted
        below: '18'
    action:
      - alias: "Set DoD on inverter"
        service: number.set_value
        target:
          entity_id: number.depth_of_discharge_on_grid
        data:
          value: >
            {% set soc_today = states('sensor.solcast_forecast_energy_today_predicted')|int %}
            {% if soc_today <= 10 %}1
            {% else %}16{% endif -%}
    mode: single

  # At 8pm set SoC based on forecast
  - alias: Goodwe DoD Night 
    description: Set DoD based on conditions
    trigger:
      - platform: time
        at: '20:00:00'
    condition:
      # if current SoC above 85%
      - condition: numeric_state
        entity_id: sensor.goodwe_battery_soc
        above: '75'
      # if battery SoH is above 50 for some safety
      - condition: numeric_state
        entity_id: sensor.goodwe_battery_soh
        above: '50'
    action:
      # cancel timers
      - service: timer.cancel
        data_template:
          entity_id: timer.main_geyser
      - service: timer.cancel
        data_template:
          entity_id: timer.front_geyser
      # turn off geysers
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
      - service: switch.turn_off
        data:
          entity_id: switch.front_bathroom_geyser
      # set DoD
      - service: script.goodwe_set_dod
        data:
          forecast: "{{ states('sensor.solcast_forecast_energy_tomorrow') }}"
    mode: single

  ## When Eskom turns on LoadShedding set 16%
  - alias: Goodwe 16% when LoadShedding start above stage 4
    trigger:
      - platform: numeric_state
        entity_id: sensor.eskom_loadshedding_stage
        above: 4
        for:
          minutes: 1
    condition:
      - condition: numeric_state
        entity_id: sensor.eskom_loadshedding_stage
        above: 4
      - condition: numeric_state
        entity_id: sensor.solcast_forecast_energy_today_predicted
        below: 26
    action:
      - alias: "Set DoD on inverter"
        service: number.set_value
        data:
          value: 16
        target:
          entity_id: number.depth_of_discharge_on_grid
    mode: single

