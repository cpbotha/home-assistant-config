input_number:
  set_goodwe_dod:
    name: Set Goodwe DoD
    min: 0
    max: 80
    mode: box
    unit_of_measurement: '%'
    #step: 1

rest:
- resource: !secret solcast_forecast_resource
  #resource: https://api.solcast.com.au/rooftop_sites/RESOURCE_ID/forecasts?format=json&api_key=API_KEY&hours=72
  scan_interval: '00:30:00' # RATE LIMIT!
  sensor:
  - name: "Solcast Forecast Data"
    force_update: true
    value_template: "{{ value_json.forecasts[0].pv_estimate|round(2) }}"
    json_attributes:
    - forecasts
  - name: "Solcast Forecast 10"
    force_update: true
    value_template: "{{ value_json.forecasts[0].pv_estimate10|round(2) }}"
  - name: "Solcast Forecast 90"
    force_update: true
    value_template: "{{ value_json.forecasts[0].pv_estimate90|round(2) }}"

template:
  - sensor:
      - name: "Solcast Forecast Energy Today Remaining"
        #unique_id: solcast_forecast_energy_today_remaining
        unique_id: solcast_forecast
        unit_of_measurement: "kWh"
        device_class: energy
        state: >
          {% set ns = namespace (fc_today = 0) %}
          {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
            {% if daydiff.days == 0 %}
              {% set ns.fc_today = ns.fc_today + (forecast.pv_estimate/2)|float %}
            {%- endif %}
          {%- endfor %}
          {{ ns.fc_today|round(2) }}
      - name: "Solcast Forecast Energy Tomorrow"
        unique_id: solcast_forecast_energy_tomorrow
        unit_of_measurement: "kWh"
        device_class: energy
        state: >
          {% set ns = namespace (fc_tommorrow = 0) %}
          {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
            {% if daydiff.days == 1 %}
              {% set ns.fc_tommorrow = ns.fc_tommorrow + (forecast.pv_estimate/2)|float %}
            {%- endif %}
          {%- endfor %}
          {{ ns.fc_tommorrow|round(2) }}
      - name: "Solcast Forecast Peak Power Today"
        unique_id: solcast_forecast_peak_power_today
        unit_of_measurement: "kW"
        device_class: power
        state_class: measurement
        state: >
          {% set ns = namespace (fc_today_max = 0) %}
          {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
            {% if daydiff.days == 0 %}
              {% if ns.fc_today_max < forecast.pv_estimate|float %}
                {% set ns.fc_today_max = forecast.pv_estimate|float %}
              {%- endif %}
            {%- endif %}
          {%- endfor %}
          {{ ns.fc_today_max|round(2) }}
      - name: "Solcast Forecast Peak Power Tomorrow"
        unique_id: solcast_forecast_peak_power_tomorrow
        unit_of_measurement: "kW"
        device_class: power
        state_class: measurement
        state: >
          {% set ns = namespace (fc_tomorrow_max = 0) %}
          {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
            {% if daydiff.days == 1 %}
              {% if ns.fc_tomorrow_max < forecast.pv_estimate|float %}
                {% set ns.fc_tomorrow_max = forecast.pv_estimate|float %}
              {%- endif %}
            {%- endif %}
          {%- endfor %}
          {{ ns.fc_tomorrow_max|round(2) }}
      - name: "Solcast Forecast Peak Time Today"
        unique_id: solcast_forecast_peak_time_today
        icon: mdi:clock
        state: >
          {% set ns = namespace (fc_today_max = 0, fc_today_max_time = 0) %}
          {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
            {% if daydiff.days == 0 %}
              {% if ns.fc_today_max < forecast.pv_estimate|float %}
                {% set ns.fc_today_max = forecast.pv_estimate|float %}
                {% set ns.fc_today_max_time = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).time() %}
              {%- endif %}
            {%- endif %}
          {%- endfor %}
          {{ ns.fc_today_max_time }}
      - name: "Solcast Forecast Peak Time Tomorrow"
        unique_id: solcast_forecast_peak_time_tomorrow
        icon: mdi:clock
        state: >
          {% set ns = namespace (fc_tomorrow_max = 0, fc_tomorrow_max_time = 0) %}
          {% for forecast in state_attr('sensor.solcast_forecast_data', 'forecasts')|default('variable is not defined') %}
            {% set daydiff = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).date() - as_local(utcnow()).date() %} 
            {% if daydiff.days == 1 %}
              {% if ns.fc_tomorrow_max < forecast.pv_estimate|float %}
                {% set ns.fc_tomorrow_max = forecast.pv_estimate|float %}
                {% set ns.fc_tomorrow_max_time = as_local(strptime(forecast.period_end, '%Y-%m-%dT%H:%M:%S.%f0Z').replace(tzinfo=utcnow().tzinfo)).time() %}
              {%- endif %}
            {%- endif %}
          {%- endfor %}
          {{ ns.fc_tomorrow_max_time }}
      - name: "Solcast Forecast Power Current Hour"
        unique_id: solcast_forecast_power_current_hour
        state: >
          {{ (state_attr('sensor.solcast_forecast_data', 'forecasts')[0].pv_estimate|default('variable is not defined') + state_attr('sensor.solcast_forecast_data', 'forecasts')[1].pv_estimate|default('variable is not defined'))|round(2) }}
        unit_of_measurement: 'kW'
        device_class: power
      - name: "Solcast Forecast Power Next 12 Hours"
        unique_id: solcast_forecast_power_next_12_hours
        state: >
          {% set ns = namespace (fc_next12 = 0) %}
          {% for i in range(0, 24) %}
            {% set ns.fc_next12 = ns.fc_next12 + states.sensor.solcast_forecast_data.attributes['forecasts'][i]['pv_estimate']|float %}
          {%- endfor %}
          {{ ns.fc_next12|round(2) }}
        unit_of_measurement: 'kW'
        device_class: power
      - name: "Solcast Forecast Power Next 24 Hours"
        unique_id: solcast_forecast_power_next_24_hours
        state: >
          {% set ns = namespace (fc_next24 = 0) %}
          {% for i in range(0, 48) %}
            {% set ns.fc_next24 = ns.fc_next24 + states.sensor.solcast_forecast_data.attributes['forecasts'][i]['pv_estimate']|float %}
          {%- endfor %}
          {{ ns.fc_next24|round(2) }}
        unit_of_measurement: 'kW'
        device_class: power
      - name: "Solcast Forecast Energy Current Hour"
        unique_id: solcast_forecast_energy_current_hour
        state: >
          {% set ns = namespace (fc_energy_current = 0) %}
          {% for i in range(0, 2) %}
            {% set ns.fc_energy_current = ns.fc_energy_current + (states.sensor.solcast_forecast_data.attributes['forecasts'][i]['pv_estimate']/2)|float %}
          {%- endfor %}
          {{ ns.fc_energy_current|round(2) }}
        unit_of_measurement: 'kWh'
        device_class: energy
      - name: "Solcast Forecast Energy Next Hour"
        unique_id: solcast_forecast_energy_next_hour
        state: >
          {% set ns = namespace (fc_energy_next = 0) %}
          {% for i in range(2, 4) %}
            {% set ns.fc_energy_next = ns.fc_energy_next + (states.sensor.solcast_forecast_data.attributes['forecasts'][i]['pv_estimate']/2)|float %}
          {%- endfor %}
          {{ ns.fc_energy_next|round(2) }}
        unit_of_measurement: 'kWh'
        device_class: energy
  - trigger:
    - platform: sun
      event: sunrise
      offset: "-00:15:00"
    sensor:
    - name: "Solcast Forecast Energy Today Predicted"
      unique_id: solcast_forecast_energy_today_predicted
      state: "{{ states('sensor.solcast_forecast') }}"
      unit_of_measurement: 'kWh'
      device_class: energy
    - name: "Solcast Forecast Peak Time Today Predicted"
      unique_id: solcast_forecast_peak_time_today_predicted
      icon: mdi:clock
      state: "{{ states('sensor.solcast_forecast_peak_time_today') }}"
    - name: "Solcast Forecast Peak Power Today Predicted"
      unique_id: solcast_forecast_peak_power_today_predicted
      unit_of_measurement: "kW"
      device_class: power
      state_class: measurement
      state: "{{ states('sensor.solcast_forecast_peak_power_today') }}"

automation:
  # Input that sets DoD on GoodWe Inverter
  # Everything else will set this input. This allows for graphing+tracking.
  - id: '1620734902145'
    alias: 'Set DoD on Goodwe based on input'
    trigger:
      - entity_id: input_number.set_goodwe_dod
        platform: state
    condition: []
    action:
      - delay: 2 # seconds
      - service: goodwe.set_ongrid_battery_dod
        data:
          entity_id: sensor.goodwe_inverter
          ongrid_battery_dod: '{{ states('sensor.set_goodwe_dod')|int }}'
    mode: queued
    max: 2

  ## set DoD at 6am after geyser was on for the morning
  - id: '1605879219606'
    alias: Goodwe DoD Morning
    description: Set max DoD in morning when day forecast more accurate
    mode: single
    trigger:
      - platform: time
        at: 06:00:00
      - platform: numeric_state
        entity_id: sensor.main_bathroom_geyser_power
        below: '100'
        for:
          seconds: 15
    condition: #[]
      # if loadshedding is below stage 5
      #- condition: numeric_state
      #  entity_id: sensor.eskom_loadshedding_stage
      #  below: 5
      - condition: template
        value_template: >-
          {% set start_time = state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False) %}
          {{ (start_time < states('sensor.time') <= '06:00' and states('input_number.set_goodwe_dod')|int == 1) or (states('sensor.time') == '06:00') }}
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: >
            {% set soc_today = states('sensor.solcast_forecast')|int %}
            {% if soc_today >= 23 %}75
            {% elif soc_today >= 20 and soc_today < 23 %}70
            {% elif soc_today >= 18 and soc_today < 20 %}65
            {% elif soc_today >= 16 and soc_today < 18 %}60
            {% elif soc_today >= 12 and soc_today < 16 %}50
            {% elif soc_today >= 11 and soc_today < 12 %}40
            {% elif soc_today >= 10 and soc_today < 11 %}30
            {% elif soc_today >= 9 and soc_today < 10 %}20
            {% else %}1{% endif -%}
      - condition: state
        entity_id: switch.main_bathroom_geyser
        state: 'on'
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
      - condition: state
        entity_id: timer.main_geyser
        state: 'active'
      - service: timer.finish
        data:
          entity_id: timer.main_geyser

  ## 9% at 9:00am
  - id: '1605879219607'
    alias: Goodwe DoD Day
    description: Set max DoD to 16% during the day - leave battery for evening use
    trigger:
      - platform: time
        at: '10:00:00'
    condition: []
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: >
            {% set soc_today = states('sensor.solcast_forecast')|int %}
            {% if soc_today <= 10 %}1
            {% else %}16{% endif -%}
    mode: single

  # At 8pm set SoC based on forecast
  - alias: Goodwe DoD Night 
    description: Set DoD based on conditions
    trigger:
      - platform: time
        at: '20:00:00'
    condition:
      # if current SoC above 85%
      - condition: numeric_state
        entity_id: sensor.goodwe_battery_soc
        above: '75'
      # if battery SoH is above 50 for some safety
      - condition: numeric_state
        entity_id: sensor.goodwe_battery_soh
        above: '50'
    action:
      # cancel timers
      - service: timer.cancel
        data_template:
          entity_id: timer.main_geyser
      - service: timer.cancel
        data_template:
          entity_id: timer.front_geyser
      # turn off geysers
      - service: switch.turn_off
        data:
          entity_id: switch.main_bathroom_geyser
      - service: switch.turn_off
        data:
          entity_id: switch.front_bathroom_geyser
      # set DoD
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: >
            {% set soc_tomorrow = states('sensor.solcast_forecast_energy_tomorrow')|int %}
            {% if soc_tomorrow >= 23 %}70
            {% elif soc_tomorrow >= 20 and soc_tomorrow < 23 %}60
            {% elif soc_tomorrow >= 18 and soc_tomorrow < 20 %}55
            {% elif soc_tomorrow >= 16 and soc_tomorrow < 18 %}50
            {% elif soc_tomorrow >= 12 and soc_tomorrow < 16 %}40
            {% elif soc_tomorrow >= 10 and soc_tomorrow < 12 %}30
            {% else %}16{% endif -%}
    mode: single

  ## When Eskom turns on LoadShedding set 16%
  - alias: Goodwe 16% when LoadShedding start above stage 4
    trigger:
      #- platform: state
      #  entity_id: input_boolean.loadshedding_slot_active
      #  from: 'off'
      #  to: 'on'
      - platform: numeric_state
        entity_id: sensor.eskom_loadshedding_stage
        above: 4
        for:
          minutes: 1
    condition:
      - condition: numeric_state
        entity_id: sensor.eskom_loadshedding_stage
        above: 4
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: 16
    mode: single

  ## Set DoD to 1% when solar forecast drop (legacy, disabled for now)
  ## or to 1% when geyser turn on, in the morning
  - alias: Goodwe When less than 6 kWh left on solcat set 1%
    trigger:
      #- platform: numeric_state
      #  entity_id: sensor.solcast_forecast
      #  below: '6'
      # also when geyser turn on in the morning
      - platform: template
        value_template: "{{ states('sensor.time') == (state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
    condition:
      - condition: template
        value_template: >-
          {% set start_time = state_attr('input_datetime.main_geyser_on_time', 'timestamp') | int | timestamp_custom('%H:%M', False) %}
          {{ ((start_time <= states('sensor.time') <= '06:00') and (states('sensor.solcast_forecast')|float < 22)) or ('09:00' < states('sensor.time')) }}
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.set_goodwe_dod
        data:
          value: 1
    mode: single

